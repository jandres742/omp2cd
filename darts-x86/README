================
= DARTS README =
================
Hello and thank you for downloading/taking interest in Darts, an asynchonous
fine-grained runtime based on the codelet model!  The following is designed to
get you off the ground.

This is a modified and improved version of DARTS aimed to support code generated
by the omp2cd compiler, although it can also be used with any DARTS code.

System requirements:
====================
- Pthreads.
- hwloc http://www.open-mpi.org/projects/hwloc/
- Optional but recommended: TBB http://threadingbuildingblocks.org/

ATLAS libraries are needed for NWChem-SCF. Add the path to the libraries
and modify the corresponding lines as indicated in the CMakeLists.txt file.

BOOST queues may be used if desired on the TP schedulers(not used by default). If desired,
modify scheduler/TPScheduler.h and the CMakeLists.txt file as indicated in those files.

Steps to install:
=================
1. Create a director to build the source in the upper most directory
   $ mkdir build
2. Move into this directory
   $ cd build
3. Use Cmake to configure the build aiming at the top level CMakelist.txt
   $ cmake ../ -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++
4. Build
   $ make
5. To install for other projects to use
   $ make install


Cmake Options:
==============
All of these options may be added when generating the makefiles in step 3.
1. Debug ie. compile with -g: -DDEBUG=ON
   By default cmake compiles in release mode ie. compiles with -O3
2. Install directory: -DCMAKE_INSTALL_PREFIX="DIRECTORY/OF/YOUR/CHOICE"
   By defualt Darts will install in bash variable HOME/darts


Troubleshooting:
================
1. Cmake cannot find a hwloc/TBB
   First make sure you have hwloc/TBB installed on your system.
   Second cmake will look for hwloc/TBB in specific directories.  To find if you
   installation is located in on of these directories, navigate in your source
   to the cmake/Modules directory and view the FindHwloc.cmake/FindTBB.cmake
   file.  You may add your search path to these files rather than moving your
   installation.


Environment Variables:
================
The following environment variables have been defined. Some of them are used mostly by
applications generated by omp2cd. To incorporate them into hand-written applications,
please include the utils.h header file from the omp2cd-examples/darts-lib folder
and use the corresponding function. Please refer to the applications in omp2cd-examples
for examples on how to use them.

If no function is specified, then the environment variable is read directly by the runtime.

---------------------------------------------------------------------------------
1. DARTS_AFFINITY

Read by: Runtime.

Purpose:
Sets up the affinity of the TP and Micro schedulers, following
the same parameters as specified by GOMP_CPU_AFFINITY in
https://gcc.gnu.org/onlinedocs/gcc-4.8.5/libgomp/GOMP_005fCPU_005fAFFINITY.html
"The variable should contain a space-separated or comma-separated
list of CPUs. This list may contain different kinds of entries: 
either single CPU numbers in any order, a range of CPUs (M-N) or
a range with some stride (M-N:S). CPU numbers are zero based"

Example: 

DARTS_AFFINITY="0-47"

Verbose will output the affinity information:

Example: DARTS_AFFINITY="0-47, verbose"

If not specified, the default COMPACT affinity policy is used.

---------------------------------------------------------------------------------
2. DARTS_NUMTPS

Read by: Application.

Function: void getNumTPs()

Purpose:
Specifies the number of TP schedulers used by the application. It is mostly used
by applications generated with omp2cd, with the total number of schedulers being
specified by OMP_NUM_THREADS. The number of Micro schedulers is calculated as a
function of DARTS_NUMTPS and OMP_NUM_THREADS.

---------------------------------------------------------------------------------
3. DARTS_TPPOLICY

Read by: Application.

Function: uint32_t getDARTSTPPolicy()

Purpose:
Sets up the policy used by the TP schedulers. Options are:

DARTS_TPPOLICY=0
Name: PushPull.
Each TP scheduler checks its queue for Threaded Procedures to run and if emtpy,
steals from othere TP scheduler's queue. Then, it pushes a Codelet to one of its
Micro schedulers. If it fails pushing the Codelet into the Micro scheduler's
queue, it executes it; if it succeeds it executes another Codelet
by its own.

DARTS_TPPOLICY=1
Name: RoundRobin.
Each TP scheduler checks its queue for Threaded Procedures to run and if
emtpy, steals from othere TP scheduler's queue. Then, it pushes all the Codelets
to its Micro scheduler's queues. The TP scheduler does not execute Codelets.

DARTS_TPPOLICY=2
Name: SingleLevelSteal.
Each TP scheduler checks its queue for Threaded Procedures to run and if emtpy,
it steals from othere TP scheduler's queue. Then, it executes all the Codelets.
NOTE: This policy is present as part of legacy code. It is recommended to better
use DARTS_POLICY=3, which has been more thoroughly tested.

DARTS_TPPOLICY=3
Name: TwoLevelSteal.
Each TP scheduler checks its queue for Threaded Procedures to run and if emtpy,
it steals from othere TP scheduler's queue. Then, it executes all the Codelets.

DARTS_TPPOLICY=4
Name: TwoLevelSteal_Sleep.
Each TP scheduler checks its queue for Threaded Procedures to run and if emtpy,
ot steals from othere TP scheduler's queue. Then, it executes all the Codelets.
Unlike previous policies, context objects used by the runtime are not deleted
right away but queued and later deleted when the scheduler has no Codelets to
execute. If there are no objects to delete, the scheduler goes to sleep.
Sleep time is controlled with DARTS_TPSLEEP.

DARTS_TPPOLICY=5
Name: TwoLevelSteal_DeleteAtFinal
Each TP scheduler checks its queue for Threaded Procedures to run and if emtpy,
it steals from othere TP scheduler's queue. Then, it executes all the Codelets.
Unlike previous policies, context objects used by the runtime are not deleted
right away but queued and deleted only at the end of the application when the
scheduler is killed.

---------------------------------------------------------------------------------
4. DARTS_MCPOLICY

Read by: Application.

Function: uint32_t getDARTSMCPolicy()

Purpose:
Sets up the policy used by the Micro schedulers. Options are:

DARTS_MCPOLICY=0
Name: MicroStandard.
Each Micro scheduler executes the Codelets pushed into its queue by its parent
TP scheduler.

DARTS_MCPOLICY=1
Name: MicroSteal.
Each Micro scheduler executes the Codelets pushed into its queue by its parent
TP scheduler. When its queue is empty, it steals one Codelet from its parent
TP scheduler's queue.

DARTS_MCPOLICY=2
Name: MicroSteal_Sleep.
Each Micro scheduler executes the Codelets pushed into its queue by its parent
TP scheduler. Unlike previous policies, context objects used by the runtime
are not deleted right away but queued and later deleted when the scheduler has
no Codelets to execute. If there are no objects to delete, the scheduler goes
to sleep. Sleep time is controlled with DARTS_MCSLEEP.

DARTS_MCPOLICY=3
Name: MicroSteal_DeleteAtFinal.
Each Micro scheduler executes the Codelets pushed into its queue by its parent
TP scheduler. Unlike previous policies, context objects used by the runtime are
not deleted right away but queued and deleted only at the end of the application
when the scheduler is killed.

---------------------------------------------------------------------------------
NOTES ABOUT POLICIES:
The following combinations of TP and Micro scheduler policies are recommended:

- DARTS_TPPOLICY=0 DARTS_MCPOLICY=0
- DARTS_TPPOLICY=1 DARTS_MCPOLICY=0
- DARTS_TPPOLICY=2 DARTS_MCPOLICY=0
- DARTS_TPPOLICY=3 DARTS_MCPOLICY=1
- DARTS_TPPOLICY=4 DARTS_MCPOLICY=2
- DARTS_TPPOLICY=5 DARTS_MCPOLICY=3

---------------------------------------------------------------------------------
DARTS_TPSLEEP:

Read by: Runtime

Specifies the maximum time in us a TP scheduler goes to sleep. The sleep time is
reset to 1 every time a Codelet has been executed and is multiplied by 2 every time
the scheduler finds no Codelets to execute or objects to delete. Default: 512 us.

---------------------------------------------------------------------------------
DARTS_MCSLEEP:

Read by: Runtime

Specifies the maximum time in us a Micro scheduler goes to sleep. The sleep time is
reset to 1 every time a Codelet has been executed and is multiplied by 2 every time
the scheduler finds no Codelets to execute or objects to delete. Default: 4096 us.

